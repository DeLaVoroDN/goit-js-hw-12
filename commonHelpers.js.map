{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/img/octagon.svg","../src/main.js"],"sourcesContent":["import axios from 'axios'; // Импортируем библиотеку Axios для выполнения HTTP-запросов\n\n// Экспортируем асинхронную функцию buildUrl для построения URL и получения данных из Pixabay API\nexport async function buildUrl(query, page) {\n  const API_KEY = '42695738-6b8e09c0e47bd53fa68e0735a'; // Константа с ключом API\n  const URL = 'https://pixabay.com/api/'; // Константа с базовым URL Pixabay API\n\n  // Отправляем GET-запрос к Pixabay API с указанными параметрами\n  const fetchGallery = await axios.get(URL, {\n    params: {\n      per_page: 15, // Количество изображений на странице\n      page: page, // Номер страницы результатов\n      key: API_KEY, // API ключ\n      q: query, // Поисковый запрос\n      IMAGE_TYPE: 'photo', // Тип изображения (фото)\n      SAFESEARCH: 'true', // Фильтрация изображений по безопасности\n      ORIENTATION: 'horizontal', // Ориентация изображений (горизонтальная)\n    },\n  });\n\n  return fetchGallery.data; // Возвращаем данные, полученные из запроса\n}\n","// Экспортируем функцию renderGallery для отображения галереи изображений\nexport function renderGallery(images) {\n  // Преобразуем массив изображений в массив строк HTML\n  return images\n    .map(\n      img =>\n        `\n        <li class=\"gallery-item\">\n          <div class=\"gallery-box item-card-wrapper\">\n            <a class=\"gallery-link\" href=\"${img.largeImageURL}\"> <!-- Ссылка на полноразмерное изображение -->\n              <img class=\"gallery-img\" src=\"${img.webformatURL}\" alt=\"${img.tags}\" loading=\"lazy\"> <!-- Отображаемое изображение -->\n            </a>\n            <div class=\"card-box\"> <!-- Контейнер для информации о изображении -->\n              <div>\n                <p class=\"card-box-text\"><b>Likes</b></p> <!-- Заголовок для количества лайков -->\n                <p class=\"card-box-text\">${img.likes}</p> <!-- Количество лайков -->\n              </div>\n              <div>\n                <p class=\"card-box-text\"><b>Views</b></p> <!-- Заголовок для количества просмотров -->\n                <p class=\"card-box-text\">${img.views}</p> <!-- Количество просмотров -->\n              </div>\n              <div>\n                <p class=\"card-box-text\"><b>Comments</b></p> <!-- Заголовок для количества комментариев -->\n                <p class=\"card-box-text\">${img.comments}</p> <!-- Количество комментариев -->\n              </div>\n              <div>\n                <p class=\"card-box-text\"><b>Downloads</b></p> <!-- Заголовок для количества загрузок -->\n                <p class=\"card-box-text\">${img.downloads}</p> <!-- Количество загрузок -->\n              </div>\n            </div>\n          </div>\n        </li>`\n    )\n    .join(''); // Объединяем строки HTML в одну строку\n}\n","export default \"__VITE_ASSET__de411352__\"","'use strict';\n\nimport iziToast from 'izitoast'; // Импорт библиотеки для всплывающих уведомлений\nimport 'izitoast/dist/css/iziToast.min.css'; // Импорт стилей для iziToast\nimport SimpleLightbox from 'simplelightbox'; // Импорт библиотеки для галереи изображений\nimport 'simplelightbox/dist/simple-lightbox.min.css'; // Импорт стилей для SimpleLightbox\nimport { buildUrl } from './js/pixabay-api.js'; // Импорт функции для построения URL\nimport { renderGallery } from './js/render-functions.js'; // Импорт функции для рендеринга галереи\nimport Error from './img/octagon.svg'; // Импорт изображения для отображения ошибки\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  // Инициализация SimpleLightbox для элементов галереи\n  captionsData: 'alt', // Использование атрибута 'alt' для подписей\n  captionDelay: 250, // Задержка перед показом подписей\n});\n\nconst refs = {\n  // Объект с ссылками на DOM-элементы\n  form: document.querySelector('.form'), // Форма поиска\n  gallery: document.querySelector('.list'), // Галерея\n  loader: document.querySelector('.loader'), // Индикатор загрузки\n  loadMoreBtn: document.querySelector('.btn-more'), // Кнопка \"Загрузить еще\"\n};\n\nlet currentPage = 1; // Номер текущей страницы\nlet searchQuery = null; // Поисковый запрос\n\nhideLoader(); // Скрываем индикатор загрузки\nhideBtn(); // Скрываем кнопку \"Загрузить еще\"\n\n// Функция обработки отправки формы\nasync function checkForSending(event) {\n  event.preventDefault(); // Предотвращаем действие по умолчанию\n\n  searchQuery = refs.form.elements.query.value.trim(); // Получаем поисковый запрос из поля ввода\n\n  currentPage = 1; // Сбрасываем номер текущей страницы\n  refs.gallery.innerHTML = ''; // Очищаем галерею\n\n  // Если поисковый запрос пустой\n  if (searchQuery === '') {\n    // Показываем предупреждающее уведомление\n    iziToast.warning({\n      message: 'Please enter a search query.', // Текст уведомления\n      messageColor: 'black', // Цвет текста\n      backgroundColor: '#ffac26', // Фоновый цвет\n      position: 'topRight', // Позиция на экране\n      pauseOnHover: false, // Пауза при наведении\n      progressBarColor: 'black', // Цвет прогресс-бара\n      timeout: 3000, // Продолжительность показа\n    });\n\n    return; // Завершаем выполнение функции\n  }\n\n  showLoader(); // Показываем индикатор загрузки\n\n  // Выполняем запрос к API Pixabay\n  buildUrl(searchQuery, currentPage)\n    .then(data => {\n      const images = data.hits; // Получаем массив изображений\n\n      refs.gallery.innerHTML = renderGallery(images); // Отображаем галерею\n\n      // Если количество изображений меньше 15, скрываем кнопку \"Загрузить еще\", иначе показываем\n      if (images.length < 15) {\n        hideBtn();\n      } else {\n        showBtn();\n      }\n\n      lightbox.refresh(); // Обновляем галерею\n    })\n    .catch(error =>\n      // В случае ошибки показываем уведомление об ошибке\n      iziToast.error({\n        theme: 'dark', // Тема уведомления\n        message:\n          'Sorry, there are no images matching your search query. Please try again!', // Текст уведомления\n        messageColor: '#ffffff', // Цвет текста\n        backgroundColor: '#ef4040', // Фоновый цвет\n        position: 'topRight', // Позиция на экране\n        iconUrl: Error, // Иконка уведомления\n        pauseOnHover: false, // Пауза при наведении\n        progressBarColor: '#b51b1b', // Цвет прогресс-бара\n        timeout: 3000, // Продолжительность показа\n      })\n    )\n    .finally(() => {\n      hideLoader(); // Скрываем индикатор загрузки\n\n      refs.form.reset(); // Очищаем форму\n    });\n}\n\n// Обработчик отправки формы\nrefs.form.addEventListener('submit', checkForSending);\n\n// Обработчик клика по кнопке \"Загрузить еще\"\nrefs.loadMoreBtn.addEventListener('click', async () => {\n  try {\n    showLoader(); // Показываем индикатор загрузки\n\n    // Выполняем запрос к API Pixabay для загрузки следующей страницы\n    const res = await buildUrl(searchQuery, ++currentPage);\n\n    refs.gallery.insertAdjacentHTML('beforeend', renderGallery(res.hits)); // Добавляем новые изображения в галерею\n\n    lightbox.refresh(); // Обновляем галерею\n\n    // Если количество изображений меньше 15\n    if (res.hits.length < 15) {\n      hideBtn(); // Скрываем кнопку \"Загрузить еще\"\n\n      // Показываем информационное уведомление о достижении конца результатов поиска\n      iziToast.info({\n        theme: 'dark', // Тема уведомления\n        message: \"We're sorry, but you've reached the end of search results.\", // Текст уведомления\n        messageColor: '#ffffff', // Цвет текста\n        backgroundColor: '#1f79ff', // Фоновый цвет\n        position: 'topRight', // Позиция на экране\n        pauseOnHover: false, // Пауза при наведении\n        progressBarColor: 'black', // Цвет прогресс-бара\n        timeout: 3000, // Продолжительность показа\n      });\n    }\n\n    // Получаем высоту элемента галереи и прокручиваем страницу к третьему элементу с плавным скроллингом\n    const itemHeight = document\n      .querySelector('.gallery-item')\n      .getBoundingClientRect().height;\n    window.scrollTo({\n      top: itemHeight * 2 + window.pageYOffset, // Позиция прокрутки\n      behavior: 'smooth', // Плавный скроллинг\n    });\n\n    // В случае ошибки при загрузке следующей страницы показываем уведомление об ошибке\n  } catch {\n    iziToast.error({\n      theme: 'dark', // Тема уведомления\n      message:\n        'Sorry, there are no images matching your search query. Please try again!', // Текст уведомления\n      messageColor: '#ffffff', // Цвет текста\n      backgroundColor: '#ef4040', // Фоновый цвет\n      position: 'topRight', // Позиция на экране\n      iconUrl: Error, // Иконка уведомления\n      pauseOnHover: false, // Пауза при наведении\n      progressBarColor: '#b51b1b', // Цвет прогресс-бара\n      timeout: 3000, // Продолжительность показа\n    });\n\n    // Скрываем индикатор загрузки после завершения выполнения запроса\n  } finally {\n    hideLoader();\n  }\n});\n// Функция для отображения кнопки \"Загрузить еще\"\nfunction showBtn() {\n  refs.loadMoreBtn.classList.remove('is-hidden'); // Удаляем класс для скрытия кнопки\n}\n\n// Функция для скрытия кнопки \"Загрузить еще\"\nfunction hideBtn() {\n  refs.loadMoreBtn.classList.add('is-hidden'); // Добавляем класс для скрытия кнопки\n}\n\n// Функция для отображения индикатора загрузки\nfunction showLoader() {\n  refs.loader.style.display = 'block'; // Показываем элемент\n}\n\n// Функция для скрытия индикатора загрузки\nfunction hideLoader() {\n  refs.loader.style.display = 'none'; // Скрываем элемент\n}\n"],"names":["buildUrl","query","page","API_KEY","URL","axios","renderGallery","images","img","Error","lightbox","SimpleLightbox","refs","currentPage","searchQuery","hideLoader","hideBtn","checkForSending","event","iziToast","showLoader","data","showBtn","error","res","itemHeight"],"mappings":"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"}